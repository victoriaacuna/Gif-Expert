{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGif","key","GifExpertApp","props","ReactDOM","render","document","getElementById"],"mappings":"mMAsCeA,EAnCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGDC,mBAAS,IAHR,mBAG9BC,EAH8B,KAGlBC,EAHkB,KAmBrC,OACI,0BAAMC,SAXW,SAACC,GAElBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SApBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGZC,EAHY,0FAG6EC,UAAUH,GAHvF,sBAIKI,MAAMF,GAJX,cAIZG,EAJY,gBAKGA,EAASC,OALZ,uBAKXC,EALW,EAKXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAeXM,GAfW,4CAAH,sDCCNO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,yBAAKgB,UAAU,0CACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCkCDS,EApCC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECAL,SAACA,GAAc,IAAD,EAEXd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAiBrC,OAVAC,qBAAU,WACN1B,EAAOC,GACF0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGvB,IAEKC,EDfwBK,CAAY5B,GAA/Ba,EAFgB,EAErBN,KAAae,EAFQ,EAERA,QAiBpB,OACI,oCACI,4BAAKtB,GACJsB,EAAQ,cAAc,cACvB,yBAAKJ,UAAU,aAEXL,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eAAamB,IAAKnB,EAAIC,IAAQD,UESnCoB,EAnCM,SAAAC,GAAU,IAAD,EAEU7C,mBAAS,CAAC,WAFpB,mBAEnBQ,EAFmB,KAEPT,EAFO,KAa1B,OACI,6BACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEKS,EAAWe,KAAI,SAAAT,GACZ,OACI,kBAAC,EAAD,CAAS6B,IAAK7B,EAAUA,SAAUA,U,MCtB1DgC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.5bf47f89.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({setCategories}) => {\n\n    // Hay que ponerle las '', sino da undefined.\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange= (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        // Para que no se actualice al darle enter.\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setCategories((categories) => [inputValue, ...categories]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            \n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","\nexport const getGif = async(category) => {\n\n    // El encodeURI es para quitar los espacios en blanco.\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=HwwZc4GhpzsLjIaqOMnNV2YhtJde4U8K&q=${encodeURI(category)}&limit=10`;\n    const response = await fetch(url);\n    const {data} = await response.json();\n    \n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs; \n\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    console.log(id, title, url);\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif'\nimport { GifGridItem } from './GifGridItem';\n// import { getGif } from '../helpers/getGif';\n\nconst GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGif(category);\n\n    // const [images, setImages] = useState([])\n\n    // // Para que la funciÃ³n solo se ejecute una sola vez al renderizar el componente.\n    // // Si le pusieras [category] en vez de [] lo que hace es que, cuando category cambie, es que se vuelve a ejecutar ese codigo.\n    // useEffect(() => {\n    //     getGif(category)\n    //         .then(imgs => {\n    //             setImages(imgs)\n    //         });\n    // }, []);\n\n\n    \n\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading?'Cargando...':'Ready to go'}\n            <div className=\"card-grid\">\n            {\n                images.map( img => (\n                    <GifGridItem key={img.id} {...img}/>\n                ))\n            }\n            </div>\n        </>\n    )\n}\n\n\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGif } from \"../helpers/getGif\";\n\n\n\nexport const useFetchGif = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGif(category)\n            .then(imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    },[]); \n\n    return state;\n\n}","import React, { useState } from 'react'\n// import PropTypes from 'prop-types'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = props => {\n\n    const [categories, setCategories] = useState(['Dragon']);\n\n    // const handleAddCategory = () => {\n    //     setCategories([...categories, 'nueva categoria']);\n    //     // setCategories( categories => {\n    //     //     return [...categories, 'nueva cat']\n    //     // })\n    // }\n\n\n    // El key no debe ser el indice.\n    return (\n        <div>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories}></AddCategory>\n            <hr/>\n            \n            <ol>\n                \n                {categories.map(category => {\n                    return (\n                        <GifGrid key={category} category={category}/>\n                    )\n                })}\n            </ol>\n        </div>\n    )\n}\n\n// GifExpertApp.propTypes = {\n\n// }\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}